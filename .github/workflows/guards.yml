# .github/workflows/guards.yml
# ==============================
# 说明：
# - 在 GitHub Actions 上运行守护脚本（Patch Fence + Invariants）。
# - 支持对 PR 和 feature 分支 push 自动运行。
# - 会自动计算本次变更文件列表并传给 Patch Fence（--changed-files-file）。
# - 使用 windows-latest 以贴近你的本地运行环境；如需 Linux 可改 runs-on。
# ==============================

name: Guards  # 工作流名称（显示在 Actions 页）

on:          # 触发条件
  pull_request:              # 在 PR 上运行
    branches: [ main, master ]  # 针对 main/master 的 PR
  push:                      # 在 push 上运行
    branches: [ feature/** ] # 面向 feature 前缀分支

jobs:        # 任务定义
  guards:    # 单个作业命名为 guards
    runs-on: windows-latest  # 选择 Windows 运行器；如需 Linux 改为 ubuntu-latest
    steps:
      - name: Checkout        # 第一步：检出仓库代码
        uses: actions/checkout@v4

      - name: Setup Python    # 第二步：安装 Python 环境（与本地相同版本或兼容）
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"  # 指定 Python 版本；可改为你实际使用的版本

      - name: Derive changed files   # 计算本次变更文件列表（相对路径，正斜杠）
        id: changes                 # 设置步骤 ID 以便后续引用
        shell: bash                 # 使用 bash 运行脚本
        run: |
          # 获取基准分支（PR 场景存在 base_ref；push 场景使用上一提交）
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          if [ -n "${{ github.base_ref }}" ]; then
            BASE="origin/${{ github.base_ref }}"
          else
            BASE="$(git rev-parse HEAD~1)"
          fi
          # 计算差异文件列表并保存为 changed.txt（统一正斜杠）
          git diff --name-only "$BASE"...HEAD | tr -d '\r' | sed 's#\\#/#g' > changed.txt
          echo "count=$(wc -l < changed.txt)" >> $GITHUB_OUTPUT  # 导出一个统计数（可选）

      - name: Run guards            # 执行守护脚本
        shell: bash                 # 使用 bash 调用 Python
        run: |
          # 用文件方式传入 Patch Fence 的变更列表
          python scripts/guards/run_guards.py --changed-files-file changed.txt
