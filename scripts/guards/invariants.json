{
  "version": "1.0.1",
  "notes": "更新不变量：新增设置窗（显示/缠论）相关片段机检，确保双击主窗可打开设置，且两页设置项完整存在；保持原有不变量不变。",
  "files": [
    {
      "path": "backend/app.py",
      "mustContain": [
        "app = FastAPI(",
        "app.include_router(candles_router)",
        "app.include_router(user_config_router)",
        "app.include_router(watchlist_router)",
        "app.include_router(storage_router)",
        "app.include_router(debug_router)",
        "app.include_router(symbols_router)",
        "def ping(",
        "def health("
      ]
    },
    {
      "path": "backend/routers/candles.py",
      "mustContain": [
        "router = APIRouter(",
        "def api_candles(",
        "window_preset",
        "bars",
        "anchor_ts",
        "get_candles("
      ]
    },
    {
      "path": "backend/services/market.py",
      "mustContain": [
        "def get_candles(",
        "def assemble_response(",
        "def _expected_last_end_ts_for_freq(",
        "def _fallback_resample_from_1m(",
        "def _fallback_resample_from_1d(",
        "def _resample_minutes_series(",
        "def _apply_adjustment(",
        "TZ_SHANGHAI",
        "\"window_preset_effective\"",
        "\"all_rows\"",
        "\"view_rows\"",
        "\"view_start_idx\"",
        "\"view_end_idx\"",
        "\"timezone\"",
        "\"source\"",
        "\"source_key\"",
        "\"downsample_from\"",
        "\"is_cached\""
      ]
    },
    {
      "path": "backend/datasource/fetchers.py",
      "mustContain": [
        "def _norm_minute_df(",
        "def _norm_daily_df(",
        "def fetch_period_ms(",
        "ZoneInfo("
      ]
    },
    {
      "path": "backend/datasource/akshare.py",
      "mustContain": [
        "def fetch_daily_none_and_factors(",
        "def fetch_minute_ak(",
        "_norm_daily_df",
        "_norm_minute_df"
      ]
    },
    {
      "path": "backend/db/sqlite.py",
      "mustContain": [
        "def upsert_candles(",
        "def select_candles(",
        "def upsert_cache_candles(",
        "def select_cache_candles(",
        "def get_cache_meta(",
        "def rebuild_cache_meta(",
        "def upsert_factors(",
        "def select_factors("
      ]
    },
    {
      "path": "backend/services/storage.py",
      "mustContain": ["def ensure_daily_recent(", "def cleanup_cache("]
    },
    {
      "path": "backend/services/watchlist.py",
      "mustContain": [
        "def get_watchlist(",
        "def add_to_watchlist(",
        "def remove_from_watchlist(",
        "def sync_all_async(",
        "def sync_symbol_async(",
        "def get_status_snapshot("
      ]
    },
    {
      "path": "backend/services/tasks.py",
      "mustContain": [
        "def start_background_tasks(",
        "def stop_background_tasks("
      ]
    },
    {
      "path": "backend/utils/window_preset.py",
      "mustContain": ["WINDOW_PRESETS", "\"ALL\"", "def preset_to_bars("]
    },
    {
      "path": "backend/routers/storage.py",
      "mustContain": [
        "def api_storage_usage(",
        "def api_cache_cleanup(",
        "def api_storage_cleanup(",
        "def api_storage_migrate(",
        "def api_storage_vacuum(",
        "def api_storage_integrity("
      ]
    },
    {
      "path": "backend/routers/user_config.py",
      "mustContain": ["def api_get_config(", "def api_put_config("]
    },
    {
      "path": "backend/routers/symbols.py",
      "mustContain": [
        "def api_get_symbol_index(",
        "def api_refresh_symbol_index(",
        "def api_symbols_summary(",
        "def _refresh_index_async("
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/api/client.js",
      "mustContain": [
        "api.interceptors.request.use(",
        "x-trace-id",
        "api.interceptors.response.use(",
        "CANCELED",
        "CanceledError",
        "AbortError",
        "console.debug(\"[api] canceled\""
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/services/marketService.js",
      "mustContain": [
        "export async function fetchCandles(",
        "window_preset",
        "anchor_ts",
        "meta: options.signal",
        "api.get(`/api/candles?"
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/composables/useMarketView.js",
      "mustContain": [
        "export function useMarketView(",
        "function previewView(",
        "async function reload(",
        "async function setBars(",
        "async function applyPreset(",
        "function setFreq(",
        "function zoomIn(",
        "function zoomOut(",
        "displayBars",
        "visibleRange"
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/charts/options.js",
      "mustContain": [
        "export function buildMainChartOption(",
        "export function buildVolumeOption(",
        "export function buildMacdOption(",
        "export function buildKdjOrRsiOption(",
        "export const zoomSync",
        "createFixedTooltipPositioner",
        "tooltip: {",
        "trigger: \"axis\"",
        "className: \"ct-fixed-tooltip\"",
        "overlayMarkerYAxis"
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/charts/chan/layers.js",
      "mustContain": [
        "export function buildUpDownMarkers(",
        "yAxisIndex: 1",
        "id: \"CHAN_UP\"",
        "id: \"CHAN_DOWN\"",
        "export function buildFractalMarkers("
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/components/features/MainChartPanel.vue",
      "mustContain": [
        "function render(",
        "function recomputeChan(",
        "function updateChanMarkers(",
        "chart.on(\"dataZoom\"",
        "chart.on(\"updateAxisPointer\"",
        "chart.getZr().on(\"mousemove\"",
        "id: \"CHAN_UP\"",
        "id: \"CHAN_DOWN\"",
        "const MainChartSettingsContent = defineComponent({",
        "function openSettingsDialog(",
        "dialogManager.open(",
        "tabs: [",
        "key: \"display\"",
        "key: \"chan\"",
        "activeTab: \"display\"",
        "FRACTAL_SHAPES",
        "FRACTAL_FILLS",
        "confirmStyle",
        "确认分型",
        "settingsDraft.fractalForm.confirmStyle",
        "settings.setFractalSettings(",
        "settings.setChanSettings(",
        "settings.setKlineStyle(",
        "settings.setMaConfigs(",
        "settings.setAdjust(",
        "title: \"行情显示设置\""
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/utils/backendReady.js",
      "mustContain": ["export async function waitBackendAlive("]
    },
    {
      "path": "frontend/chan-theory-ui/src/constants/index.js",
      "mustContain": [
        "export const WINDOW_PRESETS",
        "\"ALL\"",
        "export function pickPresetByBarsCountDown("
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/composables/useSymbolIndex.js",
      "mustContain": [
        "export async function ensureIndexFresh(",
        "/api/symbols/index",
        "export function useSymbolIndex("
      ]
    },
    {
      "path": "frontend/chan-theory-ui/src/interaction/plugin/vue.js",
      "mustContain": [
        "export default {",
        "new HotkeyService(",
        "watch(",
        "hotkeys.setUserOverrides("
      ]
    }
  ]
}
